rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }
    
    function hasPermission(permission) {
      return isAuthenticated() && 
             request.auth.token.permissions[permission] == true;
    }
    
    function isAdmin() {
      return hasRole('admin') || hasRole('superAdmin');
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Rules for users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAdmin() || isOwner(userId);
      allow delete: if isAdmin();
    }
    
    // Rules for activity logs collection
    match /activity_logs/{logId} {
      allow read: if isAdmin() || isOwner(resource.data.userId);
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // Rules for members collection
    match /membres/{membreId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated(); // Allow authenticated users to update member data
      allow delete: if hasRole('admin'); // Only admins can delete members
    }
    
    // Rules for avatars collection
    match /avatars/{avatarId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if hasRole('admin'); // Only admins can delete avatar records
    }
    
    // Rules for events collection
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated(); // You can make this more restrictive if needed
    }
    
    // Rules for health check collection
    match /_health/{docId} {
      allow read: if isAuthenticated();
      allow write: if hasRole('admin');
    }
    
    // Rules for system configuration collection (TEMPORARY - OPEN ACCESS)
    match /systemConfig/{configId} {
      allow read, write: if isAuthenticated(); // Temporary: All authenticated users can read/write
    }
    
    // Rules for audit log collection
    match /auditLog/{logId} {
      allow read: if isAdmin(); // Only admins can read audit logs
      allow create: if isAuthenticated(); // Authenticated users can create audit entries
      allow update, delete: if isAdmin(); // Only admins can modify audit logs
    }
    
    // Default rules for all other collections
    match /{document=**} {
      allow read, write: if false;  // Deny access by default
    }
  }
} 